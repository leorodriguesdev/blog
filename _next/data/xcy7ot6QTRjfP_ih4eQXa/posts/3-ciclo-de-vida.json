{"pageProps":{"post":{"id":"3-ciclo-de-vida","folder":"1-introducao-react","contentHtml":"<h2>Introdução ao React: Ciclo de Vida dos Componentes</h2>\n<h2><img style=\"max-width: 100%; height: auto;\" src=\"https://raw.githubusercontent.com/leorodriguesdev/artigos-react-react-native/main/images/3-ciclo-de-vida.webp\" alt=\"Componentes, Estado, e Props\"></h2>\n<h3>O que é o Ciclo de Vida dos Componentes?</h3>\n<p>O ciclo de vida de um componente React é uma série de métodos que são automaticamente chamados em diferentes estágios da existência de um componente. Esses estágios incluem a criação, atualização e remoção do componente. Com o advento dos Hooks, muitos desses métodos de ciclo de vida foram simplificados e integrados diretamente em componentes funcionais.</p>\n<h3>Estágios do Ciclo de Vida</h3>\n<ol>\n<li>\n<p><strong>Montagem (Mounting):</strong>\nEste é o estágio onde o componente é inserido no DOM pela primeira vez.</p>\n<ul>\n<li>\n<p><strong>useEffect</strong> com um array vazio de dependências (<code>[]</code>):\nO hook <code>useEffect</code> pode ser usado para simular o comportamento do <code>componentDidMount</code> em componentes funcionais. Ele é executado após a renderização inicial do componente.</p>\n<pre><code class=\"language-jsx\">import React, { useEffect } from 'react';\n\nfunction App() {\n  useEffect(() => {\n    console.log('Componente montado');\n  }, []);\n\n  return &#x3C;div>Hello, world!&#x3C;/div>;\n}\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Atualização (Updating):</strong>\nEste estágio ocorre quando o estado ou as props de um componente mudam, fazendo com que ele se re-renderize.</p>\n<ul>\n<li>\n<p><strong>useEffect</strong> com dependências:\nO <code>useEffect</code> também pode ser usado para simular <code>componentDidUpdate</code> ao especificar dependências. Sempre que qualquer uma das dependências mudar, o efeito será executado novamente.</p>\n<pre><code class=\"language-jsx\">import React, { useState, useEffect } from 'react';\n\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    console.log(`O contador foi atualizado para: ${count}`);\n  }, [count]);\n\n  return (\n    &#x3C;div>\n      &#x3C;p>Você clicou {count} vezes&#x3C;/p>\n      &#x3C;button onClick={() => setCount(count + 1)}>Clique aqui&#x3C;/button>\n    &#x3C;/div>\n  );\n}\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Desmontagem (Unmounting):</strong>\nEste estágio ocorre quando o componente é removido do DOM.</p>\n<ul>\n<li>\n<p><strong>useEffect</strong> com uma função de limpeza:\nO <code>useEffect</code> pode retornar uma função de limpeza que é executada antes do componente ser removido do DOM, simulando o comportamento do <code>componentWillUnmount</code>.</p>\n<pre><code class=\"language-jsx\">import React, { useEffect } from 'react';\n\nfunction App() {\n  useEffect(() => {\n    return () => {\n      console.log('Componente desmontado');\n    };\n  }, []);\n\n  return &#x3C;div>Hello, world!&#x3C;/div>;\n}\n</code></pre>\n</li>\n</ul>\n</li>\n</ol>\n<h3>Conclusão</h3>\n<p>Entender o ciclo de vida dos componentes é crucial para o desenvolvimento de aplicações React, pois permite controlar como os componentes se comportam em diferentes estágios de sua existência. Com os React Hooks, gerenciar o ciclo de vida dos componentes funcionais ficou mais intuitivo e direto. No próximo tópico, exploraremos como configurar o ambiente de desenvolvimento para começar a construir aplicações React.</p>\n<h4>Referências</h4>\n<ul>\n<li><a href=\"https://react.dev/reference/react\">Documentação oficial do React</a></li>\n<li><a href=\"https://react.dev/reference/react/Hooks\">Hooks no React</a></li>\n<li><a href=\"https://react.dev/reference/react/useEffect\">useEffect Hook</a></li>\n<li><a href=\"https://react.dev/reference/react/Component\">Tutorial sobre o ciclo de vida dos componentes</a></li>\n</ul>\n"}},"__N_SSG":true}