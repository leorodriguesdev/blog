{"pageProps":{"post":{"id":"2-jsx-componentes-estado-props","folder":"1-introducao-react","contentHtml":"<h2>Introdução ao React: Conceitos Básicos - JSX, Componentes, Estado, e Props</h2>\n<h2><img style=\"max-width: 100%; height: auto;\" src=\"https://raw.githubusercontent.com/leorodriguesdev/artigos-react-react-native/main/images/2-jsx-componentes-estado-props.webp\" alt=\"Componentes, Estado, e Props\"></h2>\n<h3>JSX: JavaScript XML</h3>\n<p>JSX é uma extensão de sintaxe para JavaScript recomendada pelo React. Ela permite que você escreva HTML diretamente dentro do código JavaScript, tornando a criação de componentes React mais intuitiva e fácil de entender. JSX é similar a um template language, mas vem com o poder de JavaScript.</p>\n<h3>Como JSX Funciona?</h3>\n<p>JSX transforma as tags HTML em chamadas de função JavaScript. Cada elemento JSX é essencialmente uma chamada para <code>React.createElement()</code>, que cria elementos React que o navegador pode entender e renderizar.</p>\n<pre><code class=\"language-jsx\">const element = &#x3C;h1>Hello, world!&#x3C;/h1>;\n// Transforma-se em\nconst element = React.createElement('h1', null, 'Hello, world!');\n</code></pre>\n<h3>Vantagens do JSX</h3>\n<ol>\n<li>\n<p><strong>Leitura e Escrita Intuitiva:</strong>\nJSX permite que você veja a estrutura da interface de usuário diretamente no código JavaScript. Isso faz com que a leitura e a escrita do código sejam mais intuitivas.</p>\n</li>\n<li>\n<p><strong>Integração com JavaScript:</strong>\nVocê pode facilmente incluir expressões JavaScript dentro do JSX usando chaves <code>{}</code>. Isso permite uma integração perfeita entre a lógica e a apresentação.</p>\n<pre><code class=\"language-jsx\">const user = {\n  firstName: 'João',\n  lastName: 'Silva'\n};\n\nconst element = &#x3C;h1>Hello, {user.firstName} {user.lastName}!&#x3C;/h1>;\n\n// O retorno de element será:\n// Hello, João Silva!\n// Com isso, podemos percorrer e buscar os dados\n// de user usando o .(ponto) mais o parâmetro desejamos \n// buscar de user: user.firstName, user.lastName\n</code></pre>\n</li>\n<li>\n<p><strong>Prevenção de Injeção de Código:</strong>\nJSX protege contra injeções de código porque qualquer coisa incorporada no JSX é transformada em uma string antes de ser renderizada. Isso ajuda a prevenir ataques de injeção XSS (Cross-Site Scripting).</p>\n</li>\n</ol>\n<h3>Componentes</h3>\n<p>Componentes são a base de qualquer aplicação React. Eles permitem dividir a interface de usuário em partes independentes e reutilizáveis. Existem dois tipos principais de componentes:</p>\n<ol>\n<li>\n<p><strong>Componentes Funcionais:</strong>\nComponentes funcionais são funções JavaScript que aceitam um único argumento chamado <code>props</code> (propriedades) e retornam elementos React. Eles são simples e geralmente usados para componentes que não têm estado próprio.</p>\n<pre><code class=\"language-jsx\">function Welcome(props) {\n  return &#x3C;h1>Hello, {props.name}&#x3C;/h1>;\n}\n\n// Chamaríamos este componente assim:\n// &#x3C;Welcome name=\"José\"/>\n// O retorno será:\n// Hello, José\n</code></pre>\n</li>\n<li>\n<p><strong>Componentes de Classe (Desencorajado):</strong>\nComponentes de classe são mais complexos e permitem que você use recursos adicionais, como estado e métodos de ciclo de vida. No entanto, com o advento dos <a href=\"https://react.dev/reference/react/Hooks\">React Hooks</a>, componentes de classe são desencorajados em favor dos componentes funcionais que utilizam hooks.\nEm outra oportunidade abordaremos os componente baseados em classes.</p>\n</li>\n</ol>\n<h3>Estado (State)</h3>\n<p>O estado é um objeto que representa as partes dinâmicas da interface de usuário. Ele permite que os componentes respondam a eventos e mudem com o tempo. Com os hooks, o estado pode ser gerenciado de forma simples em componentes funcionais usando o hook <code>useState</code>.</p>\n<pre><code class=\"language-jsx\">import React, { useState } from 'react'\n\nfunction App() {\n  const [cont, setCont] = useState(0);\n\n  return (\n    &#x3C;div>\n      &#x3C;p>Número total do contador: {contador}&#x3C;/p>\n      &#x3C;button onClick={() => setCount(contador + 1)}>Somando mais um&#x3C;/button>\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<p>Para você iniciante, que achou confuso com o código acima, abaixo vai a versão \"legendada\".</p>\n<pre><code class=\"language-jsx\">import React, { useState } from 'react' // aqui importamos o react e seu useState\n\nfunction App() {\n\n  const [cont, setCont] = useState(0); // aqui criamos o estado de cont (contador) e o setCont, ele é quem vai gerar a ação de troca de estado de cont, note que começa com 0(zero)\n\n  return (\n    &#x3C;div>\n      &#x3C;p>Número total do contador: {contador}&#x3C;/p>\n      &#x3C;button onClick={() => setCount(cont + 1)}>Somando mais um&#x3C;/button>\n    &#x3C;/div>\n  )\n  // Neste return temos uma div como container que leva um\n  // parágrafo(&#x3C;p>) e um botão (&#x3C;button>)\n  // No parágrafo mostra em tempo real o valor do contator\n  // No botão que ação para cada clique, feito através do \n  // onClick, esta ação chama o setCont, neste setCout ele pega o\n  // cont e soma mais 1.\n\n  // Resumo, a cada click do botão é somado o valor de 1 na \n  // variável cont, que começa com 0\n}\n\n</code></pre>\n<h3>Propriedades (Props)</h3>\n<p>As propriedades (props) são argumentos passados para os componentes React, semelhante a como os argumentos são passados para as funções em JavaScript. As props permitem que você passe dados de um componente pai para um componente filho.</p>\n<pre><code class=\"language-jsx\">function Welcome(props) {\n  return &#x3C;h1>Hello, {props.name}&#x3C;/h1>;\n}\n\nfunction App() {\n  return (\n    &#x3C;div>\n      &#x3C;Welcome name=\"Maria\" />\n      &#x3C;Welcome name=\"Clarice\" />\n      &#x3C;Welcome name=\"Edite\" />\n    &#x3C;/div>\n  );\n}\n</code></pre>\n<p>Resumo primeiro criamos o componente, depois chamamos ele três vezes, cada um com um nome diferente. O retorno será:</p>\n<pre><code>Hello, Maria\nHello, Clarice\nHello, Edite\n</code></pre>\n<h3>Conclusão</h3>\n<p>Os conceitos de JSX, componentes, estado e props são fundamentais para entender como o React funciona. JSX permite uma escrita mais intuitiva de componentes, componentes permitem construir interfaces modulares e reutilizáveis, o estado permite que os componentes respondam a eventos e mudem dinamicamente, e as props permitem passar dados entre componentes. No próximo tópico, exploraremos o ciclo de vida dos componentes, que é crucial para entender como e quando o estado e as props são manipulados no React.</p>\n<h4>Referências</h4>\n<ul>\n<li><a href=\"https://react.dev/reference/react\">Documentação oficial do React</a></li>\n<li><a href=\"https://react.dev/reference/react/Hooks\">Hooks no React</a></li>\n<li><a href=\"https://react.dev/reference/react/useEffect\">useEffect Hook</a></li>\n<li><a href=\"https://react.dev/reference/react/Component\">Tutorial sobre o ciclo de vida dos componentes</a></li>\n</ul>\n"}},"__N_SSG":true}